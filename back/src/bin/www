#!/usr/bin/env node
require('module-alias/register');
/**
 * Module dependencies.
 */
const fs = require('fs');
var debug = require('debug')('angar:server');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../../.env') });
const { server, io } = require('@tool/server');
const { retainDir, factoryDir, dataDir, tracingDir } = require('@store');

// Получение настроек от сервера с переодичностью
const init = require('@root/client/init');
// Выполненине основных алгоритмов
const loop = require('@root/control');

// const passport = require('passport');
const onConnection = require('../socket/on/def');

if (process.env.NODE_ENV === 'development') {
	console.log('Подключение .env ', path.join(__dirname, '../../.env'));
	require('dotenv').config({ path: path.join(__dirname, '../../.env') });
	console.log('NODE_ENV ', process.env?.NODE_ENV);
}

/**
 * Listen on provided port, on all network interfaces.
 */
var port = normalizePort(process.env.PORT || '4000');
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 	if (!isHandshake) {
// 		return next();
// 	}

// 	const header = req.headers['authorization'];

// 	if (!header) {
// 		return next(new Error('no token'));
// 	}

// 	if (!header.startsWith('bearer ')) {
// 		return next(new Error('invalid token'));
// 	}

// 	const token = header.substring(7);

// 	jwt.verify(token, process.env.JWT_ACCESS_SECRET, (err, decoded) => {
// 		if (err) {
// 			return next(new Error('invalid token'));
// 		}
// 		req.user = decoded.data;
// 		next();
// 	});
// });

// io.on('connection', (socket) => {
// 	console.log('user connect');

// 	socket.on('disconnect', function () {
// 		console.log('user disconnected');
// 	});
// });
io.on('connection', (socket) => {
	onConnection(io, socket);
});

// Создание папки data, data/retain и retain/data.json
if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir);
if (!fs.existsSync(retainDir)) {
	fs.mkdirSync(retainDir);
	fs.writeFileSync(path.join(retainDir, 'data.json'), '{}');
}
if (!fs.existsSync(tracingDir)) {
	fs.mkdirSync(tracingDir);
	fs.writeFileSync(path.join(tracingDir, 'ehour.json'), '{}');
}
// Запрос конфигурации у админ-сервера
init();
// Главный цикл управления
loop()
	.then(() => console.log('Основной цикл остановлен'))
	.catch(console.error);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}

/**
 * Graceful Shutdown
 */
process.on('SIGINT', function () {
	console.log('Graceful Shutdown');
	process.exit(0);
});
